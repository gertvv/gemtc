useDynLib(gemtc)
import(grid)
import(coda)
import(igraph)
import(plyr)
importFrom(meta, forest)

S3method(print, mtc.network)
S3method(summary, mtc.network)
S3method(plot, mtc.network)

S3method(print, mtc.model)
S3method(summary, mtc.model)
S3method(plot, mtc.model)

S3method(print, mtc.result)
S3method(summary, mtc.result)
S3method(plot, mtc.result)
S3method(as.mcmc.list, mtc.result)
S3method(forest, mtc.result)

S3method(print, mtc.anohe)
S3method(plot, mtc.anohe)
S3method(summary, mtc.anohe)

S3method(print, mtc.anohe.summary)
S3method(plot, mtc.anohe.summary)

S3method(print, mtc.nodesplit)
S3method(plot, mtc.nodesplit)
S3method(summary, mtc.nodesplit)

S3method(print, mtc.nodesplit.summary)
S3method(plot, mtc.nodesplit.summary)

S3method(print, mtc.rank.probability)
S3method(plot, mtc.rank.probability)

S3method(as.character, mtc.hy.prior)

export(
	read.mtc.network, write.mtc.network, mtc.network, mtc.data.studyrow,
	mtc.model, mtc.hy.prior, mtc.hy.empirical.lor,
	mtc.run,
	relative.effect, rank.probability,
	blobbogram, forest,
	mtc.anohe,
	mtc.nodesplit, mtc.nodesplit.comparisons,
	ll.call)
